#!/usr/bin/env python3
"""
Script de Validaci√≥n de Email para chiefdataaiofficer.com
Prueba el env√≠o y recepci√≥n de correos usando SendGrid
"""

import os
import sys
import time
import smtplib
import imaplib
import email
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from typing import Optional, List
import json

# Configuraci√≥n de SendGrid
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail, Email, To, Content

class EmailValidator:
    """Clase para validar el env√≠o y recepci√≥n de emails."""
    
    def __init__(self):
        self.sendgrid_api_key = os.getenv("SENDGRID_API_KEY")
        self.from_email = "gerardo_mayel_fernandez_alamilla@chiefdataaiofficer.com"
        self.test_email = "geramfernandez@gmail.com"
        
        # Configuraci√≥n para pruebas de recepci√≥n (Gmail)
        self.gmail_user = "geramfernandez@gmail.com"
        self.gmail_password = os.getenv("GMAIL_APP_PASSWORD")  # Contrase√±a de aplicaci√≥n de Gmail
        
        if not self.sendgrid_api_key:
            print("‚ùå Error: SENDGRID_API_KEY no est√° configurada en las variables de entorno")
            sys.exit(1)
            
        if not self.gmail_password:
            print("‚ö†Ô∏è  Advertencia: GMAIL_APP_PASSWORD no est√° configurada. Las pruebas de recepci√≥n no funcionar√°n.")
            print("   Para configurar: https://support.google.com/accounts/answer/185833")
    
    def test_sendgrid_connection(self) -> bool:
        """Prueba la conexi√≥n con SendGrid."""
        print("üîç Probando conexi√≥n con SendGrid...")
        try:
            sg = SendGridAPIClient(api_key=self.sendgrid_api_key)
            # Hacer una llamada simple para verificar la API key
            response = sg.client.api_keys.get()
            print("‚úÖ Conexi√≥n con SendGrid exitosa")
            return True
        except Exception as e:
            print(f"‚ùå Error conectando con SendGrid: {str(e)}")
            return False
    
    def send_test_email(self, to_email: str, subject: str, content: str) -> bool:
        """Env√≠a un email de prueba usando SendGrid."""
        try:
            sg = SendGridAPIClient(api_key=self.sendgrid_api_key)
            
            message = Mail(
                from_email=self.from_email,
                to_emails=to_email,
                subject=subject,
                plain_text_content=content,
                html_content=f"<html><body>{content}</body></html>"
            )
            
            response = sg.send(message)
            print(f"‚úÖ Email enviado exitosamente. Status: {response.status_code}")
            return response.status_code == 202
            
        except Exception as e:
            print(f"‚ùå Error enviando email: {str(e)}")
            return False
    
    def check_gmail_for_reply(self, expected_subject: str, timeout_minutes: int = 5) -> bool:
        """Verifica si se recibi√≥ una respuesta en Gmail."""
        if not self.gmail_password:
            print("‚ö†Ô∏è  No se puede verificar Gmail sin GMAIL_APP_PASSWORD")
            return False
            
        print(f"üîç Verificando Gmail por respuestas (timeout: {timeout_minutes} minutos)...")
        
        try:
            # Conectar a Gmail IMAP
            mail = imaplib.IMAP4_SSL("imap.gmail.com")
            mail.login(self.gmail_user, self.gmail_password)
            mail.select("INBOX")
            
            start_time = time.time()
            timeout_seconds = timeout_minutes * 60
            
            while time.time() - start_time < timeout_seconds:
                # Buscar emails recientes
                mail.list()
                mail.select("INBOX")
                
                # Buscar emails no le√≠dos con el asunto esperado
                _, messages = mail.search(None, f'UNSEEN SUBJECT "{expected_subject}"')
                
                if messages[0]:
                    print("‚úÖ Respuesta recibida en Gmail")
                    mail.logout()
                    return True
                
                print("‚è≥ Esperando respuesta... (30 segundos)")
                time.sleep(30)
            
            print("‚è∞ Timeout: No se recibi√≥ respuesta en el tiempo esperado")
            mail.logout()
            return False
            
        except Exception as e:
            print(f"‚ùå Error verificando Gmail: {str(e)}")
            return False
    
    def send_auto_reply_test(self) -> bool:
        """Env√≠a un email que solicita auto-respuesta para probar recepci√≥n."""
        subject = f"Prueba de Auto-Respuesta - {datetime.now().strftime('%Y%m%d_%H%M%S')}"
        content = f"""
Hola,

Este es un email de prueba para validar el sistema de correo de chiefdataaiofficer.com.

**Detalles de la Prueba:**
- Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
- Remitente: {self.from_email}
- Destinatario: {self.test_email}

**Instrucciones:**
Por favor, responde a este email con cualquier mensaje para confirmar que puedes recibir correos de nuestro dominio.

**Informaci√≥n T√©cnica:**
- Servicio: SendGrid
- Dominio: chiefdataaiofficer.com
- Tipo: Prueba de Validaci√≥n

Gracias por tu colaboraci√≥n.

Saludos,
Sistema de Validaci√≥n de Email
        """
        
        return self.send_test_email(self.test_email, subject, content)
    
    def run_comprehensive_test(self):
        """Ejecuta una prueba completa del sistema de email."""
        print("üöÄ Iniciando Validaci√≥n Completa del Sistema de Email")
        print("=" * 60)
        
        # 1. Probar conexi√≥n con SendGrid
        if not self.test_sendgrid_connection():
            return False
        
        print("\n" + "=" * 60)
        
        # 2. Enviar email de prueba
        print("üìß Enviando email de prueba...")
        test_subject = f"Prueba de Validaci√≥n - {datetime.now().strftime('%Y%m%d_%H%M%S')}"
        test_content = f"""
Este es un email de prueba para validar el sistema de correo.

**Informaci√≥n de la Prueba:**
- Timestamp: {datetime.now().isoformat()}
- Dominio: chiefdataaiofficer.com
- Servicio: SendGrid

Si recibes este email, el sistema de env√≠o est√° funcionando correctamente.
        """
        
        if not self.send_test_email(self.test_email, test_subject, test_content):
            print("‚ùå Fall√≥ el env√≠o del email de prueba")
            return False
        
        print("\n" + "=" * 60)
        
        # 3. Enviar email solicitando auto-respuesta
        print("üì§ Enviando email solicitando auto-respuesta...")
        if not self.send_auto_reply_test():
            print("‚ùå Fall√≥ el env√≠o del email de auto-respuesta")
            return False
        
        print("\n" + "=" * 60)
        
        # 4. Verificar recepci√≥n de respuesta
        print("üì• Verificando recepci√≥n de respuesta...")
        auto_reply_subject = f"Prueba de Auto-Respuesta - {datetime.now().strftime('%Y%m%d_%H%M')}"
        
        if self.check_gmail_for_reply(auto_reply_subject):
            print("‚úÖ Prueba de recepci√≥n exitosa")
        else:
            print("‚ö†Ô∏è  No se pudo verificar la recepci√≥n (puede requerir configuraci√≥n manual)")
        
        print("\n" + "=" * 60)
        
        # 5. Generar reporte
        self.generate_test_report()
        
        return True
    
    def generate_test_report(self):
        """Genera un reporte de la prueba."""
        report = {
            "timestamp": datetime.now().isoformat(),
            "domain": "chiefdataaiofficer.com",
            "from_email": self.from_email,
            "test_email": self.test_email,
            "sendgrid_configured": bool(self.sendgrid_api_key),
            "gmail_configured": bool(self.gmail_password),
            "test_status": "completed"
        }
        
        # Guardar reporte
        with open("email_validation_report.json", "w") as f:
            json.dump(report, f, indent=2)
        
        print("üìä Reporte de validaci√≥n guardado en: email_validation_report.json")
    
    def test_mvp_email_scenarios(self):
        """Prueba escenarios espec√≠ficos del MVP de seguros."""
        print("\nüè• Probando Escenarios del MVP de Seguros")
        print("=" * 60)
        
        scenarios = [
            {
                "name": "Acuse de Recibo de Siniestro",
                "subject": "Acuse de Recibo - Siniestro CLAIM-2024-001",
                "content": """
Estimado/a Cliente,

Hemos recibido su notificaci√≥n de siniestro y queremos confirmarle que ha sido registrado exitosamente en nuestro sistema.

**Detalles del Siniestro:**
- N√∫mero de Siniestro: CLAIM-2024-001
- Estado: En Revisi√≥n
- Fecha de Registro: {datetime.now().strftime('%d/%m/%Y %H:%M')}

**Pr√≥ximos Pasos:**
1. Nuestro equipo de an√°lisis revisar√° su caso
2. Recibir√° actualizaciones por email sobre el progreso
3. Si necesitamos documentaci√≥n adicional, se lo solicitaremos

Atentamente,
El Equipo de Siniestros
chiefdataaiofficer.com
                """.strip()
            },
            {
                "name": "Solicitud de Documentos",
                "subject": "Solicitud de Documentos - Siniestro CLAIM-2024-001",
                "content": """
Estimado/a Cliente,

Para continuar con el procesamiento de su siniestro, necesitamos que nos proporcione la siguiente documentaci√≥n:

**Documentos Requeridos:**
- Reporte policial
- Fotos del da√±o
- Factura de reparaci√≥n
- Identificaci√≥n oficial

**C√≥mo Enviar los Documentos:**
1. Responda a este email adjuntando los documentos
2. O s√∫balos a trav√©s de nuestro portal

Atentamente,
El Equipo de Siniestros
chiefdataaiofficer.com
                """.strip()
            },
            {
                "name": "Actualizaci√≥n de Estado",
                "subject": "Actualizaci√≥n de Siniestro CLAIM-2024-001",
                "content": """
Estimado/a Cliente,

Le informamos que su siniestro ha sido actualizado.

**Detalles del Siniestro:**
- N√∫mero de Siniestro: CLAIM-2024-001
- Nuevo Estado: Aprobado
- Fecha de Actualizaci√≥n: {datetime.now().strftime('%d/%m/%Y %H:%M')}

**Mensaje:**
Su siniestro ha sido aprobado y el pago ser√° procesado en los pr√≥ximos 3-5 d√≠as h√°biles.

Atentamente,
El Equipo de Siniestros
chiefdataaiofficer.com
                """.strip()
            }
        ]
        
        for i, scenario in enumerate(scenarios, 1):
            print(f"\nüìß Escenario {i}: {scenario['name']}")
            success = self.send_test_email(
                self.test_email,
                scenario['subject'],
                scenario['content']
            )
            
            if success:
                print(f"‚úÖ {scenario['name']} - Enviado correctamente")
            else:
                print(f"‚ùå {scenario['name']} - Fall√≥ el env√≠o")
            
            # Pausa entre env√≠os para evitar rate limiting
            time.sleep(2)

def main():
    """Funci√≥n principal del script."""
    print("üîß Script de Validaci√≥n de Email para chiefdataaiofficer.com")
    print("=" * 60)
    
    # Verificar variables de entorno
    if not os.getenv("SENDGRID_API_KEY"):
        print("‚ùå Error: SENDGRID_API_KEY no est√° configurada")
        print("   Configura la variable de entorno o crea un archivo .env")
        return
    
    validator = EmailValidator()
    
    # Ejecutar prueba completa
    if validator.run_comprehensive_test():
        print("\nüéâ ¬°Validaci√≥n completada exitosamente!")
        
        # Ejecutar pruebas espec√≠ficas del MVP
        validator.test_mvp_email_scenarios()
        
        print("\nüìã Resumen:")
        print("‚úÖ SendGrid configurado y funcionando")
        print("‚úÖ Emails de prueba enviados correctamente")
        print("‚úÖ Dominio chiefdataaiofficer.com validado")
        print("‚úÖ Escenarios del MVP probados")
        
        if validator.gmail_password:
            print("‚úÖ Verificaci√≥n de recepci√≥n configurada")
        else:
            print("‚ö†Ô∏è  Verificaci√≥n de recepci√≥n requiere configuraci√≥n adicional")
        
        print("\nüöÄ El sistema de email est√° listo para el MVP de seguros!")
        
    else:
        print("\n‚ùå La validaci√≥n fall√≥. Revisa la configuraci√≥n e intenta nuevamente.")

if __name__ == "__main__":
    main() 