# Archivo principal de la aplicaci√≥n Reflex.

import reflex as rx
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Importar las p√°ginas
from app.pages.index_page import index_page
from app.pages.login_page import login_page
from app.pages.dashboard_page import dashboard_page

# Importar el webhook de la API
from app.web.api.email_webhook import email_webhook

# Importar funciones de base de datos
from app.core.database import test_connection, create_tables
from app.core.init_db import init_db

# Crear la aplicaci√≥n Reflex
app = rx.App()

# A√±adir las p√°ginas a la aplicaci√≥n
app.add_page(index_page)
app.add_page(login_page)
app.add_page(dashboard_page)

# A√±adir la ruta de la API para el webhook de email
app.add_api_route("/api/email-webhook", email_webhook, methods=["POST"])

# Configuraci√≥n adicional de la aplicaci√≥n
app.title = "Agentic AI"
app.description = "Tu asistente inteligente para an√°lisis y comunicaci√≥n"

# Configurar el estado inicial
@app.on_load()
async def on_load():
    """Funci√≥n que se ejecuta al cargar la aplicaci√≥n."""
    print("üöÄ Aplicaci√≥n Agentic AI iniciada")
    
    # Verificar variables de entorno cr√≠ticas
    required_env_vars = [
        "DATABASE_URL",
        "GEMINI_API_KEY", 
        "SENDGRID_API_KEY"
    ]
    
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    if missing_vars:
        print(f"‚ö†Ô∏è  Variables de entorno faltantes: {', '.join(missing_vars)}")
        print("Algunas funcionalidades pueden no estar disponibles.")
    else:
        print("‚úÖ Todas las variables de entorno cr√≠ticas est√°n configuradas.")
    
    # Verificar conexi√≥n a la base de datos
    print("üîç Verificando conexi√≥n a la base de datos...")
    if test_connection():
        print("‚úÖ Conexi√≥n a la base de datos exitosa")
        
        # Crear tablas si no existen (solo en desarrollo)
        if os.getenv("ENVIRONMENT", "development") == "development":
            try:
                create_tables()
                print("‚úÖ Tablas de base de datos verificadas")
            except Exception as e:
                print(f"‚ö†Ô∏è  Error creando tablas: {e}")
    else:
        print("‚ùå Error: No se pudo conectar a la base de datos")
        print("üí° Aseg√∫rate de que la base de datos est√© configurada correctamente")

if __name__ == "__main__":
    app.run() 